/* The following code was generated by JFlex 1.4.3 on 28/6/17 2:07 AM */

//CHECKSTYLE:0FF

package org.scilab.modules.scinotes;

import java.io.IOException;
import java.io.OutputStreamWriter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;

import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.stream.*;
import java.util.function.*;
import static java.util.stream.Collectors.toCollection;

import java.util.Timer;
import java.time.*;
import java.time.temporal.ChronoUnit;

import java.net.*;
import java.net.URL;

import com.google.analytics.*;

import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import org.scilab.modules.commons.ScilabCommonsUtils;

@javax.annotation.Generated("JFlex")
@SuppressWarnings("fallthrough")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/6/17 2:07 AM from the specification file
 * <tt>ScilabUsageTrackingLexer.jflex</tt>
 */
public final class ScilabUsageTrackingLexer extends UsageTrackingLexerConstants {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMANDS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\2\1\22\0\1\1\1\15\1\1\1\15"+
    "\1\16\1\13\1\0\1\1\7\0\1\22\12\14\1\21\4\0\1\15"+
    "\1\0\1\15\31\14\4\0\1\15\1\0\2\15\1\5\1\12\1\11"+
    "\1\2\1\15\1\17\1\7\2\15\1\25\1\15\1\4\1\10\1\20"+
    "\1\15\1\23\1\27\1\6\1\3\1\15\1\24\1\15\1\26\1\15"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\5\2\1\1\6\2\1\3\22\2\1\0"+
    "\3\2\1\0\1\2\1\0\1\4\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\30\0\60\0\110\0\140\0\170\0\220"+
    "\0\110\0\250\0\300\0\330\0\360\0\u0108\0\u0120\0\110"+
    "\0\u0138\0\u0150\0\u0168\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0"+
    "\0\u01f8\0\u0210\0\u0228\0\u0240\0\u0258\0\u0270\0\u0288\0\u02a0"+
    "\0\u02b8\0\u02d0\0\u02e8\0\u0300\0\u0318\0\u0330\0\u0348\0\u0360"+
    "\0\u0378\0\110\0\u0378";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\3\5\1\6\1\7\1\5\1\10\2\5"+
    "\1\3\1\5\1\11\1\12\1\5\2\3\1\5\1\13"+
    "\2\5\1\14\32\0\1\5\1\15\4\5\1\16\2\5"+
    "\1\0\5\5\2\0\5\5\2\0\11\5\1\0\5\5"+
    "\2\0\5\5\2\0\11\5\1\0\5\5\2\0\1\17"+
    "\4\5\2\0\1\20\10\5\1\0\5\5\2\0\5\5"+
    "\2\0\2\5\1\21\6\5\1\0\5\5\2\0\5\5"+
    "\2\0\4\5\1\22\4\5\1\0\5\5\2\0\5\5"+
    "\2\0\11\5\1\0\3\5\1\23\1\5\2\0\5\5"+
    "\2\0\7\5\1\24\1\5\1\0\5\5\2\0\1\5"+
    "\1\25\3\5\2\0\2\5\1\26\6\5\1\0\5\5"+
    "\2\0\5\5\2\0\11\5\1\0\5\5\2\0\1\20"+
    "\4\5\2\0\11\5\1\0\5\5\2\0\3\5\1\20"+
    "\1\5\2\0\10\5\1\27\1\0\5\5\2\0\5\5"+
    "\2\0\4\5\1\30\4\5\1\0\5\5\2\0\5\5"+
    "\2\0\5\5\1\31\3\5\1\0\5\5\2\0\5\5"+
    "\2\0\11\5\1\0\5\5\2\0\2\5\1\32\2\5"+
    "\2\0\5\5\1\33\3\5\1\0\5\5\2\0\5\5"+
    "\2\0\3\5\1\34\5\5\1\0\5\5\2\0\5\5"+
    "\2\0\1\35\10\5\1\0\5\5\2\0\5\5\2\0"+
    "\11\5\1\0\4\5\1\36\2\0\5\5\2\0\11\5"+
    "\1\0\5\5\2\0\2\5\1\37\2\5\2\0\7\5"+
    "\1\40\1\5\1\0\5\5\2\0\5\5\2\0\4\5"+
    "\1\41\4\5\1\0\5\5\2\0\5\5\2\0\4\5"+
    "\1\42\4\5\1\0\5\5\2\0\5\5\2\0\1\5"+
    "\1\15\7\5\1\0\5\5\2\0\5\5\2\0\11\5"+
    "\1\0\5\5\1\43\1\0\5\5\2\0\7\5\1\20"+
    "\1\5\1\0\5\5\2\0\5\5\2\0\3\5\1\44"+
    "\5\5\1\0\5\5\2\0\5\5\2\0\3\5\1\45"+
    "\5\5\1\0\5\5\2\0\5\5\2\0\5\5\1\46"+
    "\3\5\1\0\5\5\2\0\5\5\22\0\1\47\7\0"+
    "\4\5\1\20\4\5\1\0\5\5\2\0\5\5\2\0"+
    "\11\5\1\0\3\5\1\20\1\5\2\0\5\5\2\0"+
    "\6\5\1\50\2\5\1\0\5\5\2\0\5\5\22\0"+
    "\1\51\7\0\2\5\1\52\6\5\1\0\5\5\2\0"+
    "\5\5\1\53\1\0\26\53";

  private static int [] zzUnpackTrans() {
    int [] result = new int[912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\37\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public int start;
  public int end;
  public int beginString;
  public static List<String> commandslist = new ArrayList<String>();
  public static List<String> macroslist = new ArrayList<String>();
  public static HashMap<String, Integer> commands = new HashMap<String, Integer>();
  public static HashMap<String, Integer> macros = new HashMap<String, Integer>(); 
  public Set<String> infile; 

  private ScilabDocument doc;
  private boolean transposable;
  private Element elem;
  private boolean breakstring;
  private boolean breakcomment;
  private MatchingBlockScanner matchBlock;

  URL url = new URL("https://wiki.scilab.org/GSoC_2017_Diganta_Dutta");
  GoogleAnalytic analytic = new GoogleAnalytic("Scilab Usage Tracking","1.1.0","UA-102907823-1");



    static {
    // For Scinotes colors in preferences
    commands.put("cos", 0);
    macros.put("sind", 1);
    }

    public ScilabUsageTrackingLexer(ScilabDocument doc) {
    this(doc, new MatchingBlockScanner(doc), true);
    }

    public ScilabUsageTrackingLexer(ScilabDocument doc, boolean update) {
    this(doc, new MatchingBlockScanner(doc), update);
    }

    public ScilabUsageTrackingLexer(ScilabDocument doc, MatchingBlockScanner matchBlock, boolean update) {
      this.doc = doc;
      this.elem = doc.getDefaultRootElement();
      this.infile = doc.getFunctionsInDoc();
    this.matchBlock = matchBlock;
    if (update) {
        update();
    }
    }

     public static void update() {
      if (ScilabCommonsUtils.isScilabThread()) {
        String[] funs = ScilabKeywords.GetFunctionsName();
        int funslength = funs.length;
        String[] macs = ScilabKeywords.GetMacrosName();
        int macslength = macs.length;
        commands.clear();
        macros.clear();
        int i=0;
        if (funs != null) {
          commandslist = Arrays.asList(funs);
          for (i=0; i<funslength; i++) {
            commands.put(funs[i], i);
          }
      }

        if (macs != null) {
          macroslist = Arrays.asList(macs);
          for (i=0; i<macslength; i++) {
            macros.put(macs[i], i);
          }
        }

        double totalCommands = commands.values().stream().collect(Collectors.summingInt(Integer::intValue)); 
        double totalMacros = macros.values().stream().collect(Collectors.summingInt(Integer::intValue));
        LocalDateTime currentTime = LocalDateTime.now();
        LocalDate today = LocalDate.now();

        analytic.sendStaticDataToUA("Commands Statistics", totalCommands);
        anaytic.sendStaticDataToUA("Macros Statistics", totalMacros); 

        
      }
    }

    public void setRange(int p0, int p1) {
      start = p0;
      end = p1;
      transposable = false;
      breakstring = false;
      yyreset(new ScilabDocumentReader(doc, p0, p1));
      int currentLine = elem.getElementIndex(start);
      if (currentLine != 0) {
      ScilabDocument.ScilabLeafElement e = (ScilabDocument.ScilabLeafElement) elem.getElement(currentLine - 1);
    }
    }

    public int yychar() {
      return yychar;
    }

    public int scan() throws IOException {
      int ret = yylex();
    int lastPos = start + yychar + yylength();
      if (lastPos == end -1) {
        ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBrokenString(breakstring);
        breakstring = false;
      } 
    return ret;
    }

    
    public int getKeyword(int pos, boolean strict) {
      // Pre condition
      if (elem == null) {
        return UsageTrackingLexerConstants.DEFAULT;
      }

      Element line = elem.getElement(elem.getElementIndex(pos));
      int end = line.getEndOffset();
      int tok = -1;
      start = line.getStartOffset();
      int startL = start;
      int s = -1;

        yyreset(new ScilabDocumentReader(doc, start, end));
        if (!strict) {
          pos++;
      }
          return UsageTrackingLexerConstants.DEFAULT;

    }

    public static ScilabTokens getScilabTokens(String str) {
      ScilabDocument doc = new ScilabDocument(false);
    try {
      doc.insertString(0, str, null);
      } catch (BadLocationException e) { }
    return getScilabTokens(doc); 
    }

    public static ScilabTokens getScilabTokens(ScilabDocument doc) {
      ScilabUsageTrackingLexer usagelexer = new ScilabUsageTrackingLexer(doc);
    usagelexer.yyreset(new ScilabDocumentReader(doc, 0, doc.getLength()));
    ScilabTokens tokens = new ScilabTokens();
    int tok = -1;
    try {
      while (tok != UsageTrackingLexerConstants.EOF) {
        tok = usagelexer.yylex();
        tokens.add(tok, usagelexer.yychar + usagelexer.yylength());
      }
    } catch (IOException e) { }

    return tokens;
    }

    public static class ScilabTokens {
      private List<Integer> tokenType = new ArrayList<Integer>();
      private List<Integer> tokenPos = new ArrayList<Integer>();

    ScilabTokens() { }

    void add(final int type, final int pos) {
      tokenType.add(type);
      tokenPos.add(pos);
    }

    public final List<Integer> getTokenType() {
      return tokenType;
    }

    public final List<Integer> getTokenPos() {
      return tokenPos;
    }
     }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScilabUsageTrackingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScilabUsageTrackingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 102) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

  // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { transposable = false;
            return UsageTrackingLexerConstants.FKEYWORD;
          }
        case 6: break;
        case 3: 
          { transposable = false;
                                    return ScilabLexerConstants.OSKEYWORD;
          }
        case 7: break;
        case 2: 
          { transposable = true;
            String str = yytext();
            if (commands.containsValue(str)) {
              yybegin(COMMANDS);
              return UsageTrackingLexerConstants.COMMANDS;            
            } else if (macros.containsValue(str)) {
              yybegin(COMMANDS);
              return UsageTrackingLexerConstants.MACROS;
            } else if (infile.contains(str)) {
              yybegin(COMMANDS);
              return UsageTrackingLexerConstants.MACROSINFILE;
            }
            return UsageTrackingLexerConstants.ID;
          }
        case 8: break;
        case 1: 
          { transposable = false;
            return UsageTrackingLexerConstants.DEFAULT;
          }
        case 9: break;
        case 5: 
          { return ScilabLexerConstants.URL;
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return UsageTrackingLexerConstants.EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
